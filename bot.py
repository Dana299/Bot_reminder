import os
import random
import re
import sqlite3 as sq
from datetime import datetime
from time import sleep

import telebot
from dotenv import load_dotenv
from telebot.types import (
    CallbackQuery,
    Message,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    InlineKeyboardMarkup,
)

from db_handler import SQLiteClient, UserHandler
from exceptions import ApiServiceError, UnconfiguredVariable
from parser_client import Parser
from telegram_client import TelegramClient
from weather_client import StickerType, WeatherClient
from weather_formatter import format_weather

load_dotenv()  # take environment variables from .env.

try:
    TOKEN = os.environ["TOKEN"]
    OPEN_WEATHER_KEY = os.environ["OPEN_WEATHER_KEY"]
    OPEN_WEATHER_URL = os.environ["OPEN_WEATHER_URL"]
    ADMIN_CHAT_ID = os.environ["ADMIN_CHAT_ID"]
    OPEN_WEATHER_URL_CITY = os.environ["OPEN_WEATHER_URL_CITY"]
except KeyError as err:
    raise UnconfiguredVariable from err


CREATE_TABLE = """
CREATE TABLE IF NOT EXISTS users (
user_id int PRIMARY KEY,
username text,
chat_id int,
city text,
registration_time DEFAULT CURRENT_TIMESTAMP
);
"""


if __name__ == "__main__":
    conn = sq.connect("users.db")
    # conn.execute("DROP TABLE IF EXISTS users")
    conn.execute(CREATE_TABLE)


class MyBot(telebot.TeleBot):
    def __init__(
        self,
        telegram_client: TelegramClient,
        user_handler: UserHandler,
        weather_client: WeatherClient,
        *args,
        **kwargs,
    ):
        super().__init__(*args, **kwargs)
        self.telegram_client = telegram_client
        self.user_handler = user_handler
        self.weather_client = weather_client

    def setup_resources(self):
        # –≥–æ—Ç–æ–≤–∏—Ç –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã
        self.user_handler.setup()


# —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ - –æ–¥–∏–Ω –±–æ—Ç (–∫–ª–∏–µ–Ω—Ç) –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫,
# –¥—Ä—É–≥–æ–π  - –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
telegram_client = TelegramClient(token=TOKEN, base_url="https://api.telegram.org")
user_handler = UserHandler(SQLiteClient("users.db"))
weather_client = WeatherClient(api_key=OPEN_WEATHER_KEY)
bot = MyBot(
    token=TOKEN,
    telegram_client=telegram_client,
    user_handler=user_handler,
    weather_client=weather_client,
)
bot.setup_resources()


@bot.message_handler(commands=["start"])
def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    chat_id = message.chat.id

    markup_constant = make_keyboardmarkup(
        "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ üå°‚òî", "–ê–Ω–µ–∫–¥–æ—Ç üòÅ", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üìç"
    )

    user = bot.user_handler.get_user(str(user_id))
    if user:
        bot.reply_to(
            message=message,
            text=str(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à user id: {user_id}"),
            reply_markup=markup_constant,
        )
    else:
        bot.user_handler.create_user(
            user_id=str(user_id), username=str(username), chat_id=chat_id
        )
        markup = make_inlinemarkup("–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ")
        bot.send_sticker(chat_id=message.chat.id, sticker=StickerType.HELLO.value)
        bot.send_message(
            chat_id=message.chat.id,
            text=f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b> ‚ò∫üëã!\n"
            f"–Ø - {bot.get_me().first_name}. –Ø –º–æ–≥—É –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ "
            "–æ –ø–æ–≥–æ–¥–µ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ.\n"
            "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π "
            "–≥–æ—Ä–æ–¥ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è. –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ "
            "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π "
            "–ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∑–¥–Ω–µ–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /edit_my_profile. ",
            reply_markup=markup,
            parse_mode="html",
        )
        bot.register_next_step_handler(message=message, callback=registration)


def registration(message: Message):
    if message.text in ("–ù–µ—Ç", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ"):
        bot.send_message(
            chat_id=message.chat.id,
            text="–•–æ—Ä–æ—à–æ, —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /edit_my_profile",
        )
    if message.text in ("–î–∞", "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å"):
        bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤–∞—à–µ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ",
        )
        bot.register_next_step_handler(message, enter_city)


@bot.callback_query_handler(func=lambda call: True)
def callback(call: CallbackQuery):
    if call.message:
        if call.data == "neg":
            bot.send_message(
                chat_id=call.message.chat.id,
                text="–•–æ—Ä–æ—à–æ, —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /edit_my_profile",
            )

        elif call.data == "pos":
            bot.send_message(
                chat_id=call.message.chat.id,
                text="–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è.\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤–∞—à–µ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.",
            )
            bot.register_next_step_handler(call.message, enter_city)


def enter_city(message: Message):
    if not re.fullmatch(r"[A-Z][a-zA-Z\s-]+", message.text):  # type: ignore
        bot.send_message(
            chat_id=message.chat.id,
            text="–í–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "
            "–∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, "
            "—Å–∏–º–≤–æ–ª –ø—Ä–æ–±–µ–ª–∞ –∏ –¥–µ—Ñ–∏—Å.",
        )
        bot.register_next_step_handler(message, enter_city)
    else:
        bot.user_handler.update_value(str(message.chat.id), "city", str(message.text))
        bot.send_message(
            chat_id=message.chat.id,
            text="–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã üòâ\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ "
            "–∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.",
        )


@bot.message_handler(commands=["edit_my_profile"])
def edit_profile(message: Message):
    markup_1 = make_inlinemarkup("–î–∞", "–ù–µ—Ç")
    markup_2 = make_inlinemarkup("–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ")
    current_city = bot.user_handler.get_value(
        value="city", user_id=str(message.from_user.id)
    )
    if current_city:
        bot.send_message(
            chat_id=message.from_user.id,
            text=f"–í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {current_city[0]}.\n"
            "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è?\n",
            reply_markup=markup_1,
        )
    else:
        bot.send_message(
            chat_id=message.from_user.id,
            text="–í—ã –ø–æ–∫–∞ –Ω–µ –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥. –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–µ–π—á–∞—Å?",
            reply_markup=markup_2,
        )
    bot.register_next_step_handler(message, registration)


@bot.message_handler(content_types=["text"])
def buttons_handler(message: Message):
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ üå°‚òî":
        send_weather(message)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üìç":
        edit_profile(message)
    elif message.text == "–ê–Ω–µ–∫–¥–æ—Ç üòÅ":
        tell_joke(message)


def send_weather(message: Message):
    current_city = bot.user_handler.get_value(
        value="city", user_id=str(message.from_user.id)
    )
    if current_city:
        bot.send_sticker(chat_id=message.chat.id, sticker=StickerType.EXPECTATION.value)
        bot.send_message(chat_id=message.chat.id, text="–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ, –æ–¥–Ω—É –º–∏–Ω—É—Ç—É...")
        try:
            current_weather = bot.weather_client.get_weather(
                OPEN_WEATHER_URL_CITY, city=current_city[0]
            )
            sleep(2)
            bot.send_message(
                chat_id=message.chat.id,
                text=f"–í–∞—à —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {current_city[0]}\n"
                f"{format_weather(current_weather)}",
            )
        except ApiServiceError:
            bot.send_sticker(
                chat_id=message.chat.id, sticker=StickerType.BAD_REQUEST.value
            )
            bot.send_message(
                chat_id=message.chat.id,
                text=f"–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ {current_city[0]}.\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /edit_my_profile",
            )

    else:
        bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è.\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /edit_my_profile, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥.",
        )


def handle_say_something(message: Message):
    bot.reply_to(message, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è :)")


@bot.message_handler(commands=["say_something"])
def say_something(message: Message):
    bot.reply_to(message=message, text="–ì–∞–≤-–≥–∞–≤! üê∂")
    bot.register_next_step_handler(message, callback=handle_say_something)


@bot.message_handler(commands=["joke"])
def tell_joke(message: Message):
    bot.send_message(
        message.chat.id, text=random.choice(Parser().parse_url()), parse_mode="html"
    )


def make_keyboardmarkup(text_1: str, text_2: str, text_3: str) -> ReplyKeyboardMarkup:
    """Makes ReplyKeyboardMarkup with two buttons"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    item_1 = KeyboardButton(text=text_1)
    item_2 = KeyboardButton(text=text_2)
    markup.row(item_1, item_2)
    item_3 = KeyboardButton(text=text_3)
    markup.add(item_3)
    return markup


def make_inlinemarkup(text_1: str, text_2: str) -> telebot.types.InlineKeyboardMarkup:
    """Makes InlineKeyboardMarkup with two answers - positive and negative"""
    markup = InlineKeyboardMarkup(row_width=2)
    item_1 = InlineKeyboardButton(text=text_1, callback_data="pos")
    item_2 = InlineKeyboardButton(text=text_2, callback_data="neg")
    markup.add(item_1, item_2)
    return markup


def create_error_message(error: Exception) -> str:
    data = datetime.strftime(datetime.now(), "%d/%m/%Y, %H:%M:%S")
    return f"{data} : {type(error).__name__}"


bot.polling(none_stop=True)
# while True:
#     try:
#         bot.polling()
#     except (json.JSONDecodeError, ConnectionError) as err:
#         print("–û—à–∏–±–∫–∞", err)
#         bot.telegram_client.post(
#             method="sendMessage",
#             params={"text": create_error_message(err), "chat_id": ADMIN_CHAT_ID},
#         )
#         requests.post(
#             f"https://api.telegram.org/bot5693373119:AAF19zHv4j5mCgpO53CKRIG4Lp_28kAYv40"
#             f"/sendMessage?chat_id=439019486&text="
#         )
#     except KeyboardInterrupt:
#         break
